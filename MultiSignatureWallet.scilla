scilla_version 0

import ListUtils BoolUtils

(***************************************************)
(*               Associated library                *)
(***************************************************)
library WalletLib

(* Event for communicating a new transaction id *)
let mk_transaction_added_event =
  fun (tc : Uint32) =>
    { _eventname : "Transaction created" ;
     transactionId : tc }

(* Event for communicating that a transaction was signed *)
let mk_signed_transaction_event =
  fun (tc : Uint32) =>
    { _eventname : "Transaction signed"; transactionId : tc }

(* Event for communicating that a signature was revoked *)
let mk_signature_revoked_event =
  fun (tc : Uint32) =>
    { _eventname : "Signature revoked"; transactionId : tc }

type Error =
| NonOwnerCannotSign
| UnknownTransactionId
| InsufficientFunds
| NoSignatureListFound
| AlreadySigned
| NotAlreadySigned
| InvalidContract
| InvalidAmount
| NotEnoughSignatures
| SenderMayNotExecute
| NonOwnerCannotSubmit
| IncorrectSignatureCount

(* Error events *)
let mk_error_event =
  fun (err : Error) =>
  let err_code =
    match err with
    | NonOwnerCannotSign        => Int32 -1
    | UnknownTransactionId      => Int32 -2
    | InsufficientFunds         => Int32 -3
    | NoSignatureListFound      => Int32 -4
    | AlreadySigned             => Int32 -5
    | NotAlreadySigned          => Int32 -6
    | InvalidContract           => Int32 -7
    | InvalidAmount             => Int32 -8
    | NotEnoughSignatures       => Int32 -9
    | SenderMayNotExecute       => Int32 -10
    | NonOwnerCannotSubmit      => Int32 -11
    | IncorrectSignatureCount   => Int32 -12
    end in
  { _eventname : "WalletError" ; err_code : err_code }

let t = True
let f = False
let zero = Uint32 0
let zeroUint128 = Uint128 0
let one = Uint32 1
let transaction_inc = one

type Reward = | Reward of Uint32 ByStr20 Uint128

type CalleeTransaction =
  | RequestAdminTransfer of ByStr20
  | ConfirmAdminTransfer
  | RequestOwnershipTransfer of ByStr20
  | ConfirmOwnershipTransfer
  | AddVaultFactory of ByStr20
  | RemoveVaultFactory of ByStr20
  | AddAnotherFactory of ByStr20
  | RemoveFactory of ByStr20
  | RequestGovernanceTransfer of ByStr20 Uint32
  | ConfirmGovernanceTransfer
  | ChangeInterestRate of Uint128 Uint32
  | ChangeMinimumCollateralizatioRatio of Uint128 Uint32
  | ChangeLiquidationPenalty of Uint128 Uint32
  | ChangeDevShare of Uint128 Uint32
  | ChangeBurnAddress of ByStr20 Uint32
  | ChangeInsuranceAddress of ByStr20 Uint32
  | ChangeDevAddress of ByStr20 Uint32
  | ChangeVaultPrice of Uint128 Uint32
  | ChangeBlocksPerYear of Uint128 Uint32
  | ChangeVerifier of ByStr33
  | TransferZil of ByStr20 ByStr20 Uint128
  | RemoveCollateral of ByStr20 ByStr20 Uint128
  | GiveMigrationAccess of ByStr20 ByStr20
  | ChangeUnlockWaitsBlocks of Uint128
  | ChangeDelegationContract of ByStr20
  | ChangeRewardContract of ByStr20
  | ChangeVaultProxy of ByStr20
  | ChangeVaultFactory of ByStr20
  | IncreaseAllowance of ByStr20 ByStr20 Uint128
  | DecreaseAllowance of ByStr20 ByStr20 Uint128
  | EditReward of Reward
  | RegisterReward of (List Reward)
  | RegisterCollateral of String ByStr20

(* Type of (outstanding) transactions *)
type Transaction =
(* Transfer of native tokens *)
| NativeTransaction of ByStr20 Uint128 String
(* Custom token transactions *)
| CustomTransaction of ByStr20 CalleeTransaction

(* Make map of owners *)
let mk_owners_map =
  fun (owners : List ByStr20) =>
    let init = Emp ByStr20 Bool in
    let iter =
      fun (acc : Map ByStr20 Bool) =>
      fun (cur_owner : ByStr20) =>
        (* Add owner unconditionally. We check for duplicates later *)
        builtin put acc cur_owner t
        in
    let folder = @list_foldl ByStr20 (Map ByStr20 Bool) in
    folder iter init owners

(* Wrap single message into singleton list *)
let one_msg =
  fun (msg : Message) =>
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

(* Create native transaction message as singleton list *)
let native_transaction_msg_as_list =
  fun (recipient : ByStr20) =>
  fun (amount : Uint128) =>
  fun (tag : String) =>
    let msg = {_tag : tag; _recipient : recipient; _amount : amount } in
    one_msg msg

let reward_to_pairpair = 
  fun (r : Reward) =>
    match r with
    | Reward a b c =>
      let temp = Pair {ByStr20 Uint128} b c in
      Pair {Uint32 (Pair ByStr20 Uint128)} a temp
    end
    
let mapper = @list_map (Reward) (Pair Uint32 (Pair ByStr20 Uint128) )


(* Create custom transaction message as singleton list *)
let custom_transaction_msg_as_list =
  fun (calleeContract : ByStr20) =>
  fun (calleeTransaction : CalleeTransaction) =>
    let msg =
      match calleeTransaction with
      | RequestAdminTransfer new_admin =>
        {_recipient: calleeContract;
          _tag: "RequestAdminTransfer";
          _amount: Uint128 0;
          new_admin: new_admin}
      | ConfirmAdminTransfer =>
        {_recipient: calleeContract;
          _tag: "ConfirmAdminTransfer";
          _amount: Uint128 0}
      | RequestOwnershipTransfer new_owner =>
        {_recipient: calleeContract;
          _tag: "RequestOwnershipTransfer";
          _amount: Uint128 0;
          new_owner: new_owner}
      | ConfirmOwnershipTransfer =>
        {_recipient: calleeContract;
          _tag: "ConfirmOwnershipTransfer";
          _amount: Uint128 0}
      | AddVaultFactory new_vault_factory =>
        {_recipient: calleeContract;
          _tag: "AddVaultFactory";
          _amount: Uint128 0;
          new_vault_factory: new_vault_factory}
      | RemoveVaultFactory vault_factory =>
        {_recipient: calleeContract;
          _tag: "RemoveVaultFactory";
          _amount: Uint128 0;
          vault_factory: vault_factory}
      | AddAnotherFactory vaultFactory =>
        {_recipient: calleeContract;
          _tag: "addAnotherFactory";
          _amount: Uint128 0;
          vaultFactory: vaultFactory}
      | RemoveFactory vaultFactory =>
        {_recipient: calleeContract;
          _tag: "removeFactory";
          _amount: Uint128 0;
          vaultFactory: vaultFactory}
      | RequestGovernanceTransfer new_governance proposalId =>
        {_recipient: calleeContract;
          _tag: "RequestGovernanceTransfer";
          _amount: Uint128 0;
          new_governance: new_governance;
          proposalId: proposalId}
      | ConfirmGovernanceTransfer =>
        {_recipient: calleeContract;
          _tag: "ConfirmGovernanceTransfer";
          _amount: Uint128 0}
      | ChangeInterestRate new_interest_rate proposalId =>
        {_recipient: calleeContract;
          _tag: "ChangeInterestRate";
          _amount: Uint128 0;
          new_interest_rate: new_interest_rate;
          proposalId: proposalId}
      | ChangeMinimumCollateralizatioRatio new_minimum_collateralization_ratio proposalId =>
        {_recipient: calleeContract;
          _tag: "ChangeMinimumCollateralizatioRatio";
          _amount: Uint128 0;
          new_minimum_collateralization_ratio: new_minimum_collateralization_ratio;
          proposalId: proposalId}
      | ChangeLiquidationPenalty new_liquidation_penalty proposalId =>
        {_recipient: calleeContract;
          _tag: "ChangeLiquidationPenalty";
          _amount: Uint128 0;
          new_liquidation_penalty: new_liquidation_penalty;
          proposalId: proposalId}
      | ChangeDevShare new_dev_share proposalId =>
        {_recipient: calleeContract;
          _tag: "ChangeDevShare";
          _amount: Uint128 0;
          new_dev_share: new_dev_share;
          proposalId: proposalId}
      | ChangeBurnAddress new_burn_address proposalId =>
        {_recipient: calleeContract;
          _tag: "ChangeBurnAddress";
          _amount: Uint128 0;
          new_burn_address: new_burn_address;
          proposalId: proposalId}
      | ChangeInsuranceAddress new_insurance_address proposalId =>
        {_recipient: calleeContract;
          _tag: "ChangeInsuranceAddress";
          _amount: Uint128 0;
          new_insurance_address: new_insurance_address;
          proposalId: proposalId}
      | ChangeDevAddress new_dev_address proposalId =>
        {_recipient: calleeContract;
          _tag: "ChangeDevAddress";
          _amount: Uint128 0;
          new_dev_address: new_dev_address;
          proposalId: proposalId}
      | ChangeVaultPrice new_vault_price proposalId => 
        {_recipient: calleeContract;
          _tag: "ChangeVaultPrice";
          _amount: Uint128 0;
          new_vault_price: new_vault_price;
          proposalId: proposalId}
      | ChangeBlocksPerYear new_blocks_per_year proposalId =>
        {_recipient: calleeContract;
          _tag: "ChangeBlocksPerYear";
          _amount: Uint128 0;
          new_blocks_per_year: new_blocks_per_year;
          proposalId: proposalId}
      | ChangeVerifier new_verifier =>
        {_recipient: calleeContract;
          _tag: "ChangeVerifier";
          _amount: Uint128 0;
          new_verifier: new_verifier} 
      | TransferZil vaultFactory receiver amount =>
        {_recipient: calleeContract;
          _tag: "TransferZil";
          _amount: Uint128 0;
          vaultFactory: vaultFactory;
          receiver: receiver;
          amount: amount}
      | RemoveCollateral vaultFactory receiver amount =>
        {_recipient: calleeContract;
          _tag: "RemoveCollateral";
          _amount: Uint128 0;
          vaultFactory: vaultFactory;
          receiver: receiver;
          amount: amount}
      | GiveMigrationAccess migrationContract vaultFactory =>
        {_recipient: calleeContract;
          _tag: "GiveMigrationAccess";
          _amount: Uint128 0;
          migrationContract: migrationContract;
          vaultFactory: vaultFactory}
      | ChangeUnlockWaitsBlocks new_wait_blocks =>
        {_recipient: calleeContract;
          _tag: "ChangeUnlockWaitsBlocks";
          _amount: Uint128 0;
          new_wait_blocks: new_wait_blocks}
      | ChangeDelegationContract dc => 
        {_recipient: calleeContract;
          _tag: "changeDelegationContract";
          _amount: Uint128 0;
          dc: dc}
      | ChangeRewardContract newRewardContract =>
        {_recipient: calleeContract;
          _tag: "ChangeRewardContract";
          _amount: Uint128 0;
          newRewardContract: newRewardContract}
      | ChangeVaultProxy newVaultProxy => 
        {_recipient: calleeContract;
          _tag: "ChangeVaultProxy";
          _amount: Uint128 0;
          newVaultProxy: newVaultProxy}
      | ChangeVaultFactory newVaultFactory =>
        {_recipient: calleeContract;
          _tag: "ChangeVaultFactory";
          _amount: Uint128 0;
          newVaultFactory: newVaultFactory}
      | IncreaseAllowance token spender amount => 
        {_recipient: calleeContract;
          _tag: "IncreaseAllowance";
          _amount: Uint128 0;
          token: token;
          spender: spender; 
          amount: amount}
      | DecreaseAllowance token spender amount => 
        {_recipient: calleeContract;
          _tag: "DecreaseAllowance";
          _amount: Uint128 0;
          token: token;
          spender: spender; 
          amount: amount}
      | EditReward reward => 
        let reward_temp = reward_to_pairpair reward in
        {_recipient: calleeContract;
          _tag: "EditReward";
          _amount: Uint128 0; 
          reward: reward}
      | RegisterReward rewardList => 
        let list_new = mapper reward_to_pairpair rewardList in
        {_recipient: calleeContract;
          _tag: "RegisterReward";
          _amount: Uint128 0; 
          list: list_new}
      | RegisterCollateral col contractAddress =>
        {_recipient: calleeContract;
          _tag: "RegisterCollateral";
          _amount: Uint128 0; 
          col: col;
          contractAddress: contractAddress}
      end
    in
    one_msg msg


contract Wallet
(
owners_list         : List ByStr20,
required_signatures : Uint32
)
with
  let len = @list_length ByStr20 in
  let no_of_owners = len owners_list in
  let owners_ok = builtin lt zero no_of_owners in
  let required_sigs_not_too_low = builtin lt zero required_signatures in
  let required_sigs_too_high = builtin lt no_of_owners required_signatures in
  let required_sigs_not_too_high = negb required_sigs_too_high in
  let required_sigs_ok = andb required_sigs_not_too_high required_sigs_not_too_low in
  let all_ok = andb required_sigs_ok owners_ok in
  (* Building the owners map is expensive, so avoid checking the owners map until *)
  (* everything else has been checked *)
  match all_ok with
  | True =>
    let owners_map = mk_owners_map owners_list in
    let size_of_owners_map = builtin size owners_map in
    builtin eq size_of_owners_map no_of_owners
  | False =>
    False
  end
=>

(* adr -> True indicates an owner *)
(* adr not in map indicates non-owner *)
(* adr -> False is not used *)
field owners           : Map ByStr20 Bool = mk_owners_map owners_list

field transactionCount : Uint32 = Uint32 0

(* Collected signatures for transactions *)
field signatures       : Map Uint32 (Map ByStr20 Bool) =
  Emp Uint32 (Map ByStr20 Bool)

(* Running count of collected signatures for transactions *)
field signature_counts : Map Uint32 Uint32 =
  Emp Uint32 Uint32

(* Transactions *)
field transactions     : Map Uint32 Transaction =
                           Emp Uint32 Transaction

procedure MakeError (err : Error)
  e = mk_error_event err;
  event e
end

(* Add signature to signature list *)
procedure AddSignature (transactionId : Uint32, signee : ByStr20)
  sig <- exists signatures[transactionId][signee];
  match sig with
  | False =>
    count <- signature_counts[transactionId];
    match count with
    | None =>
      (* 0 signatures *)
      signature_counts[transactionId] := one
    | Some c =>
      new_c = builtin add c one;
      signature_counts[transactionId] := new_c
    end;
    signatures[transactionId][signee] := t;
    e = mk_signed_transaction_event transactionId;
    event e
  | True =>
    (* Already signed *)
    err = AlreadySigned;
    MakeError err
  end
end

(* Common procedure for all new transactions. *)
(* Check that the sender is owner. Store and sign the transaction. *)
procedure SubmitTransaction (transaction : Transaction)
  sender_is_owner <- exists owners[_sender];
  match sender_is_owner with
  | False =>
    err = NonOwnerCannotSubmit;
    MakeError err
  | True =>
    tc <- transactionCount;
    transactions[tc] := transaction;
    (* Sender implicitly signs *)
    AddSignature tc _sender;
    (* Increment transaction counter *)
    tc_new = builtin add tc transaction_inc;
    (* Update transaction count *)
    transactionCount := tc_new;
    (* Create event with transaction Id *)
    e = mk_transaction_added_event tc;
    event e
  end
end

(* Submit a transaction of native tokens for future signoff *)
transition SubmitNativeTransaction (recipient : ByStr20, amount : Uint128, tag : String)
  zero = Uint128 0;
  amount_is_zero = builtin eq amount zero;
  match amount_is_zero with
  | True =>
    (* Illegal transaction *)
    err = InvalidAmount;
    MakeError err
  | False =>
    transaction = NativeTransaction recipient amount tag;
    SubmitTransaction transaction
  end
end

(* Common submit procedure for custom transactions *)
procedure SubmitCustomTransaction (calleeContract : ByStr20, calleeTransaction : CalleeTransaction)
  transaction = CustomTransaction calleeContract calleeTransaction;
  SubmitTransaction transaction
end

transition SubmitCustomTransitionRequestAdminTransfer(calleeContract : ByStr20, new_admin: ByStr20)
  transaction = RequestAdminTransfer new_admin;
  SubmitCustomTransaction calleeContract transaction
end

transition SubmitCustomTransitionConfirmAdminTransfer(calleeContract: ByStr20)
  transaction = ConfirmAdminTransfer;
  SubmitCustomTransaction calleeContract transaction
end

transition SubmitCustomTransitionAddVaultFactory(calleeContract : ByStr20, new_vault_factory: ByStr20)
  transaction = AddVaultFactory new_vault_factory;
  SubmitCustomTransaction calleeContract transaction
end

transition SubmitCustomTransitionRemoveVaultFactory(calleeContract : ByStr20, vault_factory: ByStr20)
  transaction = RemoveVaultFactory vault_factory;
  SubmitCustomTransaction calleeContract transaction
end

transition SubmitCustomTransitionAddAnotherFactory(calleeContract: ByStr20, vaultFactory: ByStr20)
  transaction = AddAnotherFactory vaultFactory;
  SubmitCustomTransaction calleeContract transaction
end

transition SubmitCustomTransitionRemoveFactory(calleeContract: ByStr20, vaultFactory: ByStr20)
  transaction = RemoveFactory vaultFactory;
  SubmitCustomTransaction calleeContract transaction
end

transition SubmitCustomTransitionRequestOwnershipTransfer(calleeContract : ByStr20, new_owner: ByStr20)
  transaction = RequestOwnershipTransfer new_owner;
  SubmitCustomTransaction calleeContract transaction
end

transition SubmitCustomTransitionConfirmOwnershipTransfer(calleeContract: ByStr20)
  transaction = ConfirmOwnershipTransfer;
  SubmitCustomTransaction calleeContract transaction
end

transition SubmitCustomTransitionRegisterCollateral(calleeContract: ByStr20, col: String, contractAddress: ByStr20)
  transaction = RegisterCollateral col contractAddress;
  SubmitCustomTransaction calleeContract transaction
end

transition SubmitCustomTransitionChangeVerifier(calleeContract : ByStr20, new_verifier: ByStr33)
  transaction = ChangeVerifier new_verifier;
  SubmitCustomTransaction calleeContract transaction
end

transition SubmitCustomTransitionTransferZil(calleeContract : ByStr20, vaultFactory: ByStr20, receiver: ByStr20, amount: Uint128)
  transaction = TransferZil vaultFactory receiver amount;
  SubmitCustomTransaction calleeContract transaction
end

transition SubmitCustomTransitionRemoveCollateral(calleeContract : ByStr20, vaultFactory: ByStr20, receiver: ByStr20, amount: Uint128)
  transaction = RemoveCollateral vaultFactory receiver amount;
  SubmitCustomTransaction calleeContract transaction
end

transition SubmitCustomTransitionGiveMigrationAccess(calleeContract : ByStr20, migrationContract: ByStr20, vaultFactory: ByStr20)
  transaction = GiveMigrationAccess migrationContract vaultFactory;
  SubmitCustomTransaction calleeContract transaction
end

transition SubmitCustomTransitionRequestGovernanceTransfer(calleeContract : ByStr20, new_governance : ByStr20, proposalId: Uint32)
  transaction = RequestGovernanceTransfer new_governance proposalId;
  SubmitCustomTransaction calleeContract transaction
end

transition SubmitCustomTransitionConfirmGovernanceTransfer(calleeContract: ByStr20)
  transaction = ConfirmGovernanceTransfer;
  SubmitCustomTransaction calleeContract transaction
end

transition SubmitCustomTransitionChangeInterestRate(calleeContract: ByStr20, new_interest_rate: Uint128, proposalId: Uint32)
  transaction = ChangeInterestRate new_interest_rate proposalId;
  SubmitCustomTransaction calleeContract transaction
end

transition SubmitCustomTransitionChangeMinimumCollateralizatioRatio(calleeContract: ByStr20, new_minimum_collateralization_ratio: Uint128, proposalId: Uint32)
  transaction = ChangeMinimumCollateralizatioRatio new_minimum_collateralization_ratio proposalId;
  SubmitCustomTransaction calleeContract transaction
end


transition SubmitCustomTransitionChangeLiquidationPenalty(calleeContract: ByStr20, new_liquidation_penalty: Uint128, proposalId: Uint32)
  transaction = ChangeLiquidationPenalty new_liquidation_penalty proposalId;
  SubmitCustomTransaction calleeContract transaction
end

transition SubmitCustomTransitionChangeDevShare(calleeContract: ByStr20, new_dev_share: Uint128, proposalId: Uint32)
  transaction = ChangeDevShare new_dev_share proposalId;
  SubmitCustomTransaction calleeContract transaction
end

transition SubmitCustomTransitionChangeBurnAddress(calleeContract: ByStr20, new_burn_address: ByStr20, proposalId: Uint32)
  transaction = ChangeBurnAddress new_burn_address proposalId;
  SubmitCustomTransaction calleeContract transaction
end

transition SubmitCustomTransitionChangeInsuranceAddress(calleeContract: ByStr20, new_insurance_address: ByStr20, proposalId: Uint32)
  transaction = ChangeInsuranceAddress new_insurance_address proposalId;
  SubmitCustomTransaction calleeContract transaction
end

transition SubmitCustomTransitionChangeDevAddress(calleeContract: ByStr20, new_dev_address: ByStr20, proposalId: Uint32)
  transaction = ChangeDevAddress new_dev_address proposalId;
  SubmitCustomTransaction calleeContract transaction
end

transition SubmitCustomTransitionChangeVaultPrice(calleeContract: ByStr20, new_vault_price: Uint128, proposalId: Uint32)
  transaction = ChangeVaultPrice new_vault_price proposalId;
  SubmitCustomTransaction calleeContract transaction
end

transition SubmitCustomTransitionChangeBlocksPerYear(calleeContract: ByStr20, new_blocks_per_year: Uint128, proposalId: Uint32)
  transaction = ChangeBlocksPerYear new_blocks_per_year proposalId;
  SubmitCustomTransaction calleeContract transaction
end

transition SubmitCustomTransitionChangeUnlockWaitsBlocks(calleeContract: ByStr20, new_wait_blocks: Uint128)
  transaction = ChangeUnlockWaitsBlocks new_wait_blocks;
  SubmitCustomTransaction calleeContract transaction
end

transition SubmitCustomTransitionChangeDelegationContract(calleeContract: ByStr20, dc: ByStr20)
  transaction = ChangeDelegationContract dc;
  SubmitCustomTransaction calleeContract transaction
end

transition SubmitCustomTransitionChangeRewardContract(calleeContract: ByStr20, newRewardContract: ByStr20)
  transaction = ChangeRewardContract newRewardContract;
  SubmitCustomTransaction calleeContract transaction
end

transition SubmitCustomTransitionChangeVaultProxy(calleeContract: ByStr20, newVaultProxy: ByStr20)
  transaction = ChangeVaultProxy newVaultProxy;
  SubmitCustomTransaction calleeContract transaction
end

transition SubmitCustomTransitionChangeVaultFactory(calleeContract: ByStr20, newVaultFactory: ByStr20)
  transaction = ChangeVaultFactory newVaultFactory;
  SubmitCustomTransaction calleeContract transaction
end

transition SubmitCustomTransitionIncreaseAllowance(calleeContract: ByStr20, token: ByStr20, spender: ByStr20, amount: Uint128)
  transaction = IncreaseAllowance token spender amount;
  SubmitCustomTransaction calleeContract transaction
end

transition SubmitCustomTransitionDecreaseAllowance(calleeContract: ByStr20, token: ByStr20, spender: ByStr20, amount: Uint128)
  transaction = DecreaseAllowance token spender amount;
  SubmitCustomTransaction calleeContract transaction
end

transition SubmitCustomTransitionEditReward(calleeContract: ByStr20, reward: Reward)
  transaction = EditReward reward;
  SubmitCustomTransaction calleeContract transaction
end

transition SubmitCustomTransitionRegisterReward(calleeContract: ByStr20, rewardList: List Reward)
  transaction = RegisterReward rewardList;
  SubmitCustomTransaction calleeContract transaction
end

(* Sign off on an existing transaction *)
transition SignTransaction (transactionId : Uint32)
  (* Only owners are allowed to sign off transactions *)
  sender_is_owner <- exists owners[_sender];
  match sender_is_owner with
  | False =>
    err = NonOwnerCannotSign;
    MakeError err
  | True =>
    (* Transaction must have been submitted *)
    transaction <- transactions[transactionId];
    match transaction with
    | None =>
      err = UnknownTransactionId;
      MakeError err
    | Some _ =>
      (* Remaining error cases handled by AddSignature *)
      AddSignature transactionId _sender
    end
  end
end

(* Revoke signature of existing transaction, if it has not yet been executed. *)
transition RevokeSignature (transactionId : Uint32)
  sig <- exists signatures[transactionId][_sender];
  match sig with
  | False =>
    err = NotAlreadySigned;
    MakeError err
  | True =>
    count <- signature_counts[transactionId];
    match count with
    | None =>
      err = IncorrectSignatureCount;
      MakeError err
    | Some c =>
      c_is_zero = builtin eq c zero;
      match c_is_zero with
      | True =>
        err = IncorrectSignatureCount;
        MakeError err
      | False =>
        new_c = builtin sub c one;
        signature_counts[transactionId] := new_c;
        delete signatures[transactionId][_sender];
        e = mk_signature_revoked_event transactionId;
        event e
      end
    end
  end
end

(* Delete transaction and signatures *)
procedure DeleteTransaction (transactionId : Uint32)
  delete transactions[transactionId];
  delete signatures[transactionId];
  delete signature_counts[transactionId]
end

(* Execute native token transaction. *)
(* Checks permission to execute, and checks for sufficient balance. *)
(* Assumes the transaction has been signed off by enough owners. *)
procedure ExecuteNativeTransaction (recipient : ByStr20, amount : Uint128, tag : String)
  (* Only the recipient or an owner can execute the transaction *)
  recipient_is_sender = builtin eq recipient _sender;
  sender_is_owner <- exists owners[_sender];
  sender_may_execute = orb recipient_is_sender sender_is_owner;
  match sender_may_execute with
  | False =>
    err = SenderMayNotExecute;
    MakeError err
  | True =>
    (* Check for sufficient funds  *)
    bal <- _balance;
    not_enough_money = builtin lt bal amount;
    match not_enough_money with
    | True =>
      err = InsufficientFunds;
      MakeError err
    | False =>
      (* Transaction approved, and enough money available. *)
      (* Execute transaction *)
      msgs = native_transaction_msg_as_list recipient amount tag;
      send msgs
    end
  end
end

(* Execute custom transaction. *)
(* Checks permission to execute. *)
(* Assumes the transaction has been signed off by enough owners. *)
procedure ExecuteCustomTransaction (calleeContract : ByStr20, calleeTransaction : CalleeTransaction)
  (* Only owners may execute *)
  sender_is_owner <- exists owners[_sender];
  match sender_is_owner with
  | False =>
    err = SenderMayNotExecute;
    MakeError err
  | True =>
    as_msg = custom_transaction_msg_as_list calleeContract calleeTransaction;
    send as_msg
  end
end

(* Execute signed-off transaction *)
transition ExecuteTransaction (transactionId : Uint32)
  transaction_opt <- transactions[transactionId];
  match transaction_opt with
  | None =>
    (* Transaction was not found. *)
    err = UnknownTransactionId;
    MakeError err
  | Some transaction =>
    sig_count_opt <- signature_counts[transactionId];
    match sig_count_opt with
    | None =>
      (* Signature count not found, even though the transaction exists.*)
      err = NoSignatureListFound;
      MakeError err
    | Some sig_count =>
      not_enough_signatures = builtin lt sig_count required_signatures;
      match not_enough_signatures with
      | True =>
        err = NotEnoughSignatures;
        MakeError err
      | False =>
        match transaction with
        | NativeTransaction recipient amount tag =>
          ExecuteNativeTransaction recipient amount tag
        | CustomTransaction calleeContract calleeTransaction =>
          ExecuteCustomTransaction calleeContract calleeTransaction
        end;
        (* Remove transaction and signatures. *)
        (* Note: The transaction may have failed, but without a callback *)
        (* we have no way of detecting whether it did *)
        DeleteTransaction transactionId
      end
    end
  end
end

(* Add native funds to wallet *)
transition AddFunds ()
  accept;
  e = { _eventname: "FundsAdded"; sender: _sender; amount : _amount};
  event e
end