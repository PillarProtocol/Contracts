scilla_version 0

import IntUtils

library FungibleToken

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let two_msgs =
fun (msg1 : Message) =>
fun (msg2 : Message) =>
  let msgs_tmp = one_msg msg2 in
  Cons {Message} msg1 msgs_tmp

(* Error events *)
type Error =
| CodeIsSender
| CodeInsufficientFunds
| CodeInsufficientAllowance
| CodeNotOwner
| CodeNotVaultFactory
| AlreadyInitialized
| CannotBeSameAddress

let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeIsSender              => Int32 -201
      | CodeInsufficientFunds     => Int32 -202
      | CodeInsufficientAllowance => Int32 -203
      | CodeNotOwner              => Int32 -204
      | CodeNotVaultFactory       => Int32 -205
      | AlreadyInitialized        => Int32 -206
      | CannotBeSameAddress       => Int32 -207
      end
    in
    { _exception : "Error"; code : result_code }
  
let zero = Uint128 0
let true = True
let false = False

let burnAccount = 0x0000000000000000000000000000000000000001

let get_val =
  fun (some_val: Option Uint128) =>
  match some_val with
  | Some val => val
  | None => zero
  end
  
let get_bool = 
  fun (some_bool: Option Bool) =>
    match some_bool with
      | Some bool => bool
      | None => false
    end
  

contract Pillar

(
  contract_owner: ByStr20,
  name : String,
  symbol: String,
  decimals: Uint32,
  init_supply : Uint128
)

field owner : ByStr20 = contract_owner
field pending_owner : Option ByStr20 = None {ByStr20}
field total_supply : Uint128 = init_supply

field balances: Map ByStr20 Uint128 
  = let emp_map = Emp ByStr20 Uint128 in
    builtin put emp_map contract_owner init_supply

field allowances: Map ByStr20 (Map ByStr20 Uint128) 
  = Emp ByStr20 (Map ByStr20 Uint128)

field init_vault_factory: Map ByStr20 Bool = Emp ByStr20 Bool

procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure IsOwner(address: ByStr20)
  o <- owner;
  is_owner = builtin eq o address;
  match is_owner with
  | True =>
  | False =>
    err = CodeNotOwner;
    ThrowError err
  end
end

procedure isFactory(address: ByStr20)
  some_is_factory <- init_vault_factory[address];
  is_factory = get_bool some_is_factory;
  match is_factory with
    | True =>
    | False =>
      err = CodeNotVaultFactory;
      ThrowError err
  end
end

procedure IsNotSender(address: ByStr20)
  is_sender = builtin eq _sender address;
  match is_sender with
  | True =>
    err = CodeIsSender;
    ThrowError err
  | False =>
  end
end

procedure AuthorizedMint(recipient: ByStr20, amount: Uint128) 
  o_recipient_bal <- balances[recipient];
  bal = get_val o_recipient_bal;
  new_balance = builtin add amount bal;
  balances[recipient] := new_balance;
  current_total_supply <- total_supply;
  new_total_supply = builtin add current_total_supply amount;
  total_supply := new_total_supply;
  e = {_eventname: "Minted"; minter: _sender; recipient: recipient; amount: amount};
  event e
end

procedure AuthorizedBurnIfSufficientBalance(from: ByStr20, amount: Uint128)
  o_get_bal <- balances[from];
  bal = get_val o_get_bal;
  can_burn = uint128_le amount bal;
  match can_burn with
  | True =>
    new_balance = builtin sub bal amount;
    balances[from] := new_balance;
    current_total_supply <- total_supply;
    new_total_supply = builtin sub current_total_supply amount;
    total_supply := new_total_supply;
    e = {_eventname: "Burnt"; burner: _sender; burn_account: from; amount: amount};
    event e  
  | False =>
    err = CodeInsufficientFunds;
    ThrowError err
  end
end

procedure AuthorizedMoveIfSufficientBalance(from: ByStr20, to: ByStr20, amount: Uint128)
  o_from_bal <- balances[from];
  bal = get_val o_from_bal;
  can_do = uint128_le amount bal;
  match can_do with
  | True =>
    new_from_bal = builtin sub bal amount;
    balances[from] := new_from_bal;
    get_to_bal <- balances[to];
    new_to_bal = match get_to_bal with
    | Some bal => builtin add bal amount
    | None => amount
    end;
    balances[to] := new_to_bal
  | False =>
    err = CodeInsufficientFunds;
    ThrowError err
  end
end

transition removeFactory(vaultFactory: ByStr20)
  IsOwner _sender;
  init_vault_factory[vaultFactory] := false;
  delete init_vault_factory[vaultFactory]
end

transition addAnotherFactory(vaultFactory: ByStr20)
  IsOwner _sender;
  init_vault_factory[vaultFactory] := true
end

transition RequestOwnershipTransfer (new_owner : ByStr20)
  IsOwner _sender;
  IsNotSender new_owner;
  po = Some {ByStr20} new_owner;
  pending_owner := po
end

transition ConfirmOwnershipTransfer ()
  optional_po <- pending_owner;
  match optional_po with
  | Some pend_owner =>
      caller_is_new_owner = builtin eq _sender pend_owner;
      match caller_is_new_owner with
      | True =>
          owner := pend_owner;
          none = None {ByStr20};
          pending_owner := none;
          e = {_eventname : "TransferOwnership"; newOwner : pend_owner};
          event e
      | False =>
      end
  | None =>
  end
end

transition Mint(recipient: ByStr20, amount: Uint128)
  isFactory _sender;
  AuthorizedMint recipient amount;
  msg_to_recipient = {_tag : "RecipientAcceptMint"; _recipient : recipient; _amount : zero; 
                      minter : _sender; recipient : recipient; amount : amount};
  msg_to_sender = {_tag : "MintSuccessCallBack"; _recipient : _sender; _amount : zero; 
                      minter : _sender; recipient : recipient; amount : amount};
  msgs = two_msgs msg_to_recipient msg_to_sender;
  send msgs
end

transition Burn(amount: Uint128)
  AuthorizedBurnIfSufficientBalance _sender amount;
  msg_to_sender = {_tag : "BurnSuccessCallBack"; _recipient : _sender; _amount : zero; 
                    burner : _sender; burn_account : burnAccount; amount : amount};
  msgs = one_msg msg_to_sender;
  send msgs
end

transition IncreaseAllowance(spender: ByStr20, amount: Uint128)
  IsNotSender spender;
  some_current_allowance <- allowances[_sender][spender];
  current_allowance = get_val some_current_allowance;
  new_allowance = builtin add current_allowance amount;
  allowances[_sender][spender] := new_allowance;
  e = {_eventname : "IncreasedAllowance"; token_owner : _sender; spender: spender; new_allowance : new_allowance};
  event e
end

transition DecreaseAllowance(spender: ByStr20, amount: Uint128)
  IsNotSender spender;
  some_current_allowance <- allowances[_sender][spender];
  current_allowance = get_val some_current_allowance;
  new_allowance =
    let amount_le_allowance = uint128_le amount current_allowance in
      match amount_le_allowance with
      | True => builtin sub current_allowance amount
      | False => zero
      end;
  allowances[_sender][spender] := new_allowance;
  e = {_eventname : "DecreasedAllowance"; token_owner : _sender; spender: spender; new_allowance : new_allowance};
  event e
end

transition Transfer(to: ByStr20, amount: Uint128)
  AuthorizedMoveIfSufficientBalance _sender to amount;
  e = {_eventname : "TransferSuccess"; sender : _sender; recipient : to; amount : amount};
  event e;
  msg_to_recipient = {_tag : "RecipientAcceptTransfer"; _recipient : to; _amount : zero; 
                      sender : _sender; recipient : to; amount : amount};
  msg_to_sender = {_tag : "TransferSuccessCallBack"; _recipient : _sender; _amount : zero; 
                  sender : _sender; recipient : to; amount : amount};
  msgs = two_msgs msg_to_recipient msg_to_sender;
  send msgs
end

transition BurnFrom(from: ByStr20, amount: Uint128)
  IsNotSender from;
  o_spender_allowed <- allowances[from][_sender];
  allowed = get_val o_spender_allowed;
  can_do = uint128_le amount allowed;
  match can_do with
    | True => 
      AuthorizedBurnIfSufficientBalance from amount;
      e = {_eventname : "BurnFromSuccess"; initiator : _sender; sender : from; amount : amount};
      event e;
      new_allowed = builtin sub allowed amount;
      allowances[from][_sender] := new_allowed;
      msg_to_sender = {_tag : "BurnFromSuccessCallBack"; _recipient : _sender; _amount : zero; 
                    burner : _sender; burn_account : from; amount : amount};
      msgs = one_msg msg_to_sender;
      send msgs
    | False =>
      err = CodeInsufficientAllowance;
      ThrowError err
  end
end

transition TransferFrom(from: ByStr20, to: ByStr20, amount: Uint128)
  IsNotSender from;
  o_spender_allowed <- allowances[from][_sender];
  allowed = get_val o_spender_allowed;
  can_do = uint128_le amount allowed;
  match can_do with
  | True =>
    AuthorizedMoveIfSufficientBalance from to amount;
    e = {_eventname : "TransferFromSuccess"; initiator : _sender; sender : from; recipient : to; amount : amount};
    event e;
    new_allowed = builtin sub allowed amount;
    allowances[from][_sender] := new_allowed;
    msg_to_recipient = {_tag: "RecipientAcceptTransferFrom"; _recipient : to; _amount: zero; 
                        initiator: _sender; sender : from; recipient: to; amount: amount};
    msg_to_sender = {_tag: "TransferFromSuccessCallBack"; _recipient: _sender; _amount: zero; 
                    initiator: _sender; sender: from; recipient: to; amount: amount};
    msgs = two_msgs msg_to_recipient msg_to_sender;
    send msgs
  | False =>
    err = CodeInsufficientAllowance;
    ThrowError err
  end
end